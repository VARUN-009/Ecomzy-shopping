{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const CartSlice = createSlice({\n  name: \"cart\",\n  initialState: [],\n  reducers: {\n    add: (state, action) => {\n      state.push(action.payload);\n    },\n    remove: (state, action) => {\n      return state.filter(item => item.id !== action.payload);\n    }\n  }\n});\nexport const {\n  add,\n  remove\n} = CartSlice.actions;\nexport default CartSlice.reducer;\n\n/*\nAdd and remove basically 2 hi functions hai ki cart m add hoge ya cart se remove and initially cart m kuch bhi ni hai\n\nreducers function input m 2 cheeje lete hai -- state , action\njo bhi reducers function ke andar tum as a parameter pass kar rahe ho usko access karte hai payload se -- action.payload darshata hai input parameter   \nstate darsha rha hai initial state and initial state hai teri [] empty array\n\nab humne remove wale m id send ki thi na toh bss jo id iske equal ni hogi vo hi rahegi baaki sab htt jayegi \n\n\nIn Redux and Redux Toolkit, the term \"state\" generally refers to the current representation of data within your application. It's essentially a snapshot of your application's data at any given point in time.\n\nname: This is just a name for your slice of state. In this case, it's named \"cart\" to represent a shopping cart.\n\ninitialState: This is the initial state of your slice. Here, it's an empty array because your shopping cart starts empty.\n\nreducers: These are functions that define how your state can change\n\nHere, state specifically refers to the current state of the shopping cart. It's an array that holds the items currently in the cart.\n\nSo, when we talk about state in this context, we are referring to an array that contains the items in the shopping cart. Initially, this array is empty (initialState: []), and it gets updated as items are added or removed from the cart.\n\nIn the add reducer, state.push(action.payload) modifies the state array by adding the action.payload (the new item to be added to the cart) to it.\n\n*/","map":{"version":3,"names":["createSlice","CartSlice","name","initialState","reducers","add","state","action","push","payload","remove","filter","item","id","actions","reducer"],"sources":["C:/Users/VARUN PUNIA/Desktop/Shopping-cart/src/redux/Slices/CartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const CartSlice = createSlice( {\n    name: \"cart\",\n    initialState : [],\n    reducers : {\n        add: (state, action) => {\n            state.push(action.payload)\n        },\n        remove: (state, action) => {\n            return state.filter( (item) => item.id !== action.payload )\n        }\n    }\n} );\n\nexport const {add, remove} = CartSlice.actions;\nexport default CartSlice.reducer;\n\n/*\nAdd and remove basically 2 hi functions hai ki cart m add hoge ya cart se remove and initially cart m kuch bhi ni hai\n\nreducers function input m 2 cheeje lete hai -- state , action\njo bhi reducers function ke andar tum as a parameter pass kar rahe ho usko access karte hai payload se -- action.payload darshata hai input parameter   \nstate darsha rha hai initial state and initial state hai teri [] empty array\n\nab humne remove wale m id send ki thi na toh bss jo id iske equal ni hogi vo hi rahegi baaki sab htt jayegi \n\n\nIn Redux and Redux Toolkit, the term \"state\" generally refers to the current representation of data within your application. It's essentially a snapshot of your application's data at any given point in time.\n\nname: This is just a name for your slice of state. In this case, it's named \"cart\" to represent a shopping cart.\n\ninitialState: This is the initial state of your slice. Here, it's an empty array because your shopping cart starts empty.\n\nreducers: These are functions that define how your state can change\n\nHere, state specifically refers to the current state of the shopping cart. It's an array that holds the items currently in the cart.\n\nSo, when we talk about state in this context, we are referring to an array that contains the items in the shopping cart. Initially, this array is empty (initialState: []), and it gets updated as items are added or removed from the cart.\n\nIn the add reducer, state.push(action.payload) modifies the state array by adding the action.payload (the new item to be added to the cart) to it.\n\n*/"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAE;EAClCE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAG,EAAE;EACjBC,QAAQ,EAAG;IACPC,GAAG,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC9B,CAAC;IACDC,MAAM,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACvB,OAAOD,KAAK,CAACK,MAAM,CAAGC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAE;IAC/D;EACJ;AACJ,CAAC,CAAE;AAEH,OAAO,MAAM;EAACJ,GAAG;EAAEK;AAAM,CAAC,GAAGT,SAAS,CAACa,OAAO;AAC9C,eAAeb,SAAS,CAACc,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}